{"version":3,"sources":["../node_modules/workbox-core/_version.js","../node_modules/workbox-core/models/messages/messages.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/_private/assert.js","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/_private/logger.js","../node_modules/workbox-core/_private/waitUntil.js","../node_modules/workbox-precaching/_version.js","../node_modules/workbox-precaching/utils/createCacheKey.js","../node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../node_modules/workbox-precaching/utils/printCleanupDetails.js","../node_modules/workbox-precaching/utils/printInstallDetails.js","../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../node_modules/workbox-core/copyResponse.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../node_modules/workbox-core/_private/Deferred.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-core/_private/timeout.js","../node_modules/workbox-strategies/_version.js","../node_modules/workbox-strategies/StrategyHandler.js","../node_modules/workbox-strategies/Strategy.js","../node_modules/workbox-precaching/PrecacheStrategy.js","../node_modules/workbox-precaching/PrecacheController.js","../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../node_modules/workbox-precaching/utils/generateURLVariations.js","../node_modules/workbox-precaching/PrecacheRoute.js","../node_modules/workbox-precaching/addRoute.js","../node_modules/workbox-precaching/precache.js","../node_modules/workbox-precaching/precacheAndRoute.js","../node_modules/workbox-strategies/utils/messages.js","../node_modules/workbox-strategies/NetworkOnly.js","../node_modules/idb/build/wrap-idb-value.js","../node_modules/idb/build/index.js","../node_modules/workbox-background-sync/_version.js","../node_modules/workbox-background-sync/lib/QueueDb.js","../node_modules/workbox-background-sync/lib/QueueStore.js","../node_modules/workbox-background-sync/lib/StorableRequest.js","../node_modules/workbox-background-sync/Queue.js","../node_modules/workbox-background-sync/BackgroundSyncPlugin.js","../src/sw.js"],"names":["messages","paramName","validValueDescription","value","moduleName","className","funcName","expectedType","classNameStr","expectedClassName","isReturnValueProblem","expectedMethod","entry","firstEntry","secondEntry","thrownErrorMessage","cacheNameId","method","name","methodName","expectedClass","normalizedRangeHeader","size","start","end","url","error","message","status","cacheName","origin","type","generatorFunction","code","details","messageGenerator","WorkboxError","errorCode","isArray","hasMethod","object","isType","isInstance","isOneOf","validValues","isArrayOfClass","item","finalAssertExports","_cacheNameDetails","_createCacheName","eachCacheNameDetail","fn","key","cacheNames","userCacheName","logger","inGroup","methodToColorMap","print","args","styles","logPrefix","api","loggerMethods","waitUntil","event","asyncFn","returnPromise","REVISION_SEARCH_PARAM","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","request","state","cachedResponse","PrecacheCacheKeyPlugin","precacheController","params","cacheKey","logGroup","groupTitle","deletedURLs","printCleanupDetails","deletionCount","_nestedGroup","urls","printInstallDetails","urlsToPrecache","urlsAlreadyPrecached","precachedCount","alreadyPrecachedCount","supportStatus","canConstructResponseFromBodyStream","testResponse","copyResponse","response","modifier","clonedResponse","modifiedResponseInit","body","getFriendlyURL","stripParams","fullURL","ignoreParams","strippedURL","param","cacheMatchIgnoreParams","cache","matchOptions","strippedRequestURL","keysOptions","cacheKeys","strippedCacheKeyURL","Deferred","resolve","reject","quotaErrorCallbacks","executeQuotaErrorCallbacks","callback","timeout","ms","toRequest","input","StrategyHandler","strategy","options","assert","plugin","possiblePreloadResponse","originalRequest","cb","err","pluginFilteredRequest","fetchResponse","responseClone","effectiveRequest","multiMatchOptions","vary","responseToCache","hasCacheUpdateCallback","oldResponse","mode","statefulParam","promise","pluginsUsed","Strategy","responseDone","handler","handlerDone","waitUntilError","PrecacheStrategy","integrityInManifest","integrityInRequest","noIntegrityConflict","defaultPluginIndex","cacheWillUpdatePluginCount","index","PrecacheController","plugins","fallbackToNetwork","entries","urlsToWarnAbout","cacheMode","warningMessage","installReportPlugin","integrity","updatedURLs","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","getOrCreatePrecacheController","defaultMethod","validMethods","normalizeHandler","Route","match","RegExpRoute","regExp","result","Router","responsePromise","payload","requestPromises","sameOrigin","route","debugMessages","msg","catchHandler","catchErr","routes","matchResult","routeIndex","defaultRouter","getOrCreateDefaultRouter","registerRoute","capture","captureUrl","valueToCheck","wildcards","matchCallback","removeIgnoredSearchParams","ignoreURLParametersMatching","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","directoryURL","cleanURL","additionalURLs","urlToAttempt","PrecacheRoute","urlsToCacheKeys","possibleURL","addRoute","precacheRoute","precache","precacheAndRoute","strategyName","NetworkOnly","promises","timeoutPromise","instanceOfAny","constructors","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","getCursorAdvanceMethods","cursorRequestMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","unlisten","success","wrap","cacheDonePromiseForTransaction","tx","done","complete","idbProxyTraps","target","prop","receiver","replaceTraps","wrapFunction","func","storeNames","unwrap","transformCachableValue","newValue","openDB","version","blocked","upgrade","blocking","terminated","openPromise","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","oldTraps","DB_VERSION","DB_NAME","REQUEST_OBJECT_STORE_NAME","QUEUE_NAME_INDEX","QueueDb","cursor","queueName","results","id","query","direction","oldVersion","QueueStore","firstId","serializableProperties","StorableRequest","requestData","TAG_PREFIX","MAX_RETENTION_TIME","queueNames","convertEntry","queueStoreEntry","queueEntry","Queue","forceSyncFallback","onSync","maxRetentionTime","allEntries","now","unexpiredEntries","maxRetentionTimeInMs","metadata","timestamp","operation","syncComplete","syncError","BackgroundSyncPlugin","bgSyncPlugin"],"mappings":"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","file":"sw.js","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return (`The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`);\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`);\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName, }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}` +\n            `${funcName}()' must be of type ${expectedType}.`);\n    },\n    'incorrect-class': ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem, }) => {\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        if (isReturnValueProblem) {\n            return (`The return value from ` +\n                `'${moduleName}.${classNameStr}${funcName}()' ` +\n                `must be an instance of class ${expectedClassName}.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}${funcName}()' ` +\n            `must be an instance of class ${expectedClassName}.`);\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName, }) => {\n        if (!expectedMethod ||\n            !paramName ||\n            !moduleName ||\n            !className ||\n            !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return (`${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`);\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return (`An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`);\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`);\n    },\n    'plugin-error-request-will-fetch': ({ thrownErrorMessage }) => {\n        if (!thrownErrorMessage) {\n            throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);\n        }\n        return (`An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownErrorMessage}'.`);\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return (`You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`);\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return (`The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`);\n    },\n    'unregister-route-route-not-registered': () => {\n        return (`The route you're trying to unregister was not previously ` +\n            `registered.`);\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return (`The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`);\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return (`The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`);\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return (`The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`);\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName, }) => {\n        return (`The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`);\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return (`When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`);\n    },\n    'channel-name-required': () => {\n        return (`You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`);\n    },\n    'invalid-responses-are-same-args': () => {\n        return (`The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`);\n    },\n    'expire-custom-caches-only': () => {\n        return (`You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`);\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return (`The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`);\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return (`Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return (`The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return (`The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`);\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return (`Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`);\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return (`There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`);\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return (`The precaching request for '${url}' failed` +\n            (status ? ` with an HTTP status of ${status}.` : `.`));\n    },\n    'non-precached-url': ({ url }) => {\n        return (`createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`);\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`);\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    'cross-origin-copy-response': ({ origin }) => {\n        return (`workbox-core.copyResponse() can only be used with same-origin ` +\n            `responses. It was passed a response with origin ${origin}.`);\n    },\n    'opaque-streams-source': ({ type }) => {\n        const message = `One of the workbox-streams sources resulted in an ` +\n            `'${type}' response.`;\n        if (type === 'opaqueredirect') {\n            return (`${message} Please do not use a navigation request that results ` +\n                `in a redirect as a source.`);\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} deletedURLs\n *\n * @private\n */\nconst logGroup = (groupTitle, deletedURLs) => {\n    logger.groupCollapsed(groupTitle);\n    for (const url of deletedURLs) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n};\n/**\n * @param {Array<string>} deletedURLs\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printCleanupDetails(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        logger.groupCollapsed(`During precaching cleanup, ` +\n            `${deletionCount} cached ` +\n            `request${deletionCount === 1 ? ' was' : 's were'} deleted.`);\n        logGroup('Deleted Cache Requests', deletedURLs);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} urls\n *\n * @private\n */\nfunction _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    logger.groupCollapsed(groupTitle);\n    for (const url of urls) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n}\n/**\n * @param {Array<string>} urlsToPrecache\n * @param {Array<string>} urlsAlreadyPrecached\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;\n        if (alreadyPrecachedCount > 0) {\n            message +=\n                ` ${alreadyPrecachedCount} ` +\n                    `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;\n        }\n        logger.groupCollapsed(message);\n        _nestedGroup(`View newly precached URLs.`, urlsToPrecache);\n        _nestedGroup(`View previously precached URLs.`, urlsAlreadyPrecached);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cachedResponseWillBeUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport '../_version.js';\nexport const messages = {\n    strategyStart: (strategyName, request) => `Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,\n    printFinalResponse: (response) => {\n        if (response) {\n            logger.groupCollapsed(`View the final response here.`);\n            logger.log(response || '[No response returned]');\n            logger.groupEnd();\n        }\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */\n    constructor(options = {}) {\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: '_handle',\n                paramName: 'request',\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request),\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ` +\n                    `${this._networkTimeoutSeconds} seconds.`);\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:background-sync:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2021 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB } from 'idb';\nimport '../_version.js';\nconst DB_VERSION = 3;\nconst DB_NAME = 'workbox-background-sync';\nconst REQUEST_OBJECT_STORE_NAME = 'requests';\nconst QUEUE_NAME_INDEX = 'queueName';\n/**\n * A class to interact directly an IndexedDB created specifically to save and\n * retrieve QueueStoreEntries. This class encapsulates all the schema details\n * to store the representation of a Queue.\n *\n * @private\n */\nexport class QueueDb {\n    constructor() {\n        this._db = null;\n    }\n    /**\n     * Add QueueStoreEntry to underlying db.\n     *\n     * @param {UnidentifiedQueueStoreEntry} entry\n     */\n    async addEntry(entry) {\n        const db = await this.getDb();\n        const tx = db.transaction(REQUEST_OBJECT_STORE_NAME, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.add(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the first entry id in the ObjectStore.\n     *\n     * @return {number | undefined}\n     */\n    async getFirstEntryId() {\n        const db = await this.getDb();\n        const cursor = await db\n            .transaction(REQUEST_OBJECT_STORE_NAME)\n            .store.openCursor();\n        return cursor === null || cursor === void 0 ? void 0 : cursor.value.id;\n    }\n    /**\n     * Get all the entries filtered by index\n     *\n     * @param queueName\n     * @return {Promise<QueueStoreEntry[]>}\n     */\n    async getAllEntriesByQueueName(queueName) {\n        const db = await this.getDb();\n        const results = await db.getAllFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n        return results ? results : new Array();\n    }\n    /**\n     * Returns the number of entries filtered by index\n     *\n     * @param queueName\n     * @return {Promise<number>}\n     */\n    async getEntryCountByQueueName(queueName) {\n        const db = await this.getDb();\n        return db.countFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n    }\n    /**\n     * Deletes a single entry by id.\n     *\n     * @param {number} id the id of the entry to be deleted\n     */\n    async deleteEntry(id) {\n        const db = await this.getDb();\n        await db.delete(REQUEST_OBJECT_STORE_NAME, id);\n    }\n    /**\n     *\n     * @param queueName\n     * @returns {Promise<QueueStoreEntry | undefined>}\n     */\n    async getFirstEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), 'next');\n    }\n    /**\n     *\n     * @param queueName\n     * @returns {Promise<QueueStoreEntry | undefined>}\n     */\n    async getLastEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), 'prev');\n    }\n    /**\n     * Returns either the first or the last entries, depending on direction.\n     * Filtered by index.\n     *\n     * @param {IDBCursorDirection} direction\n     * @param {IDBKeyRange} query\n     * @return {Promise<QueueStoreEntry | undefined>}\n     * @private\n     */\n    async getEndEntryFromIndex(query, direction) {\n        const db = await this.getDb();\n        const cursor = await db\n            .transaction(REQUEST_OBJECT_STORE_NAME)\n            .store.index(QUEUE_NAME_INDEX)\n            .openCursor(query, direction);\n        return cursor === null || cursor === void 0 ? void 0 : cursor.value;\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, DB_VERSION, {\n                upgrade: this._upgradeDb,\n            });\n        }\n        return this._db;\n    }\n    /**\n     * Upgrades QueueDB\n     *\n     * @param {IDBPDatabase<QueueDBSchema>} db\n     * @param {number} oldVersion\n     * @private\n     */\n    _upgradeDb(db, oldVersion) {\n        if (oldVersion > 0 && oldVersion < DB_VERSION) {\n            if (db.objectStoreNames.contains(REQUEST_OBJECT_STORE_NAME)) {\n                db.deleteObjectStore(REQUEST_OBJECT_STORE_NAME);\n            }\n        }\n        const objStore = db.createObjectStore(REQUEST_OBJECT_STORE_NAME, {\n            autoIncrement: true,\n            keyPath: 'id',\n        });\n        objStore.createIndex(QUEUE_NAME_INDEX, QUEUE_NAME_INDEX, { unique: false });\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { QueueDb, } from './QueueDb.js';\nimport '../_version.js';\n/**\n * A class to manage storing requests from a Queue in IndexedDB,\n * indexed by their queue name for easier access.\n *\n * Most developers will not need to access this class directly;\n * it is exposed for advanced use cases.\n */\nexport class QueueStore {\n    /**\n     * Associates this instance with a Queue instance, so entries added can be\n     * identified by their queue name.\n     *\n     * @param {string} queueName\n     */\n    constructor(queueName) {\n        this._queueName = queueName;\n        this._queueDb = new QueueDb();\n    }\n    /**\n     * Append an entry last in the queue.\n     *\n     * @param {Object} entry\n     * @param {Object} entry.requestData\n     * @param {number} [entry.timestamp]\n     * @param {Object} [entry.metadata]\n     */\n    async pushEntry(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'pushEntry',\n                paramName: 'entry',\n            });\n            assert.isType(entry.requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'pushEntry',\n                paramName: 'entry.requestData',\n            });\n        }\n        // Don't specify an ID since one is automatically generated.\n        delete entry.id;\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    /**\n     * Prepend an entry first in the queue.\n     *\n     * @param {Object} entry\n     * @param {Object} entry.requestData\n     * @param {number} [entry.timestamp]\n     * @param {Object} [entry.metadata]\n     */\n    async unshiftEntry(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'unshiftEntry',\n                paramName: 'entry',\n            });\n            assert.isType(entry.requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'unshiftEntry',\n                paramName: 'entry.requestData',\n            });\n        }\n        const firstId = await this._queueDb.getFirstEntryId();\n        if (firstId) {\n            // Pick an ID one less than the lowest ID in the object store.\n            entry.id = firstId - 1;\n        }\n        else {\n            // Otherwise let the auto-incrementor assign the ID.\n            delete entry.id;\n        }\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    /**\n     * Removes and returns the last entry in the queue matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     */\n    async popEntry() {\n        return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName));\n    }\n    /**\n     * Removes and returns the first entry in the queue matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     */\n    async shiftEntry() {\n        return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName));\n    }\n    /**\n     * Returns all entries in the store matching the `queueName`.\n     *\n     * @param {Object} options See {@link workbox-background-sync.Queue~getAll}\n     * @return {Promise<Array<Object>>}\n     */\n    async getAll() {\n        return await this._queueDb.getAllEntriesByQueueName(this._queueName);\n    }\n    /**\n     * Returns the number of entries in the store matching the `queueName`.\n     *\n     * @param {Object} options See {@link workbox-background-sync.Queue~size}\n     * @return {Promise<number>}\n     */\n    async size() {\n        return await this._queueDb.getEntryCountByQueueName(this._queueName);\n    }\n    /**\n     * Deletes the entry for the given ID.\n     *\n     * WARNING: this method does not ensure the deleted entry belongs to this\n     * queue (i.e. matches the `queueName`). But this limitation is acceptable\n     * as this class is not publicly exposed. An additional check would make\n     * this method slower than it needs to be.\n     *\n     * @param {number} id\n     */\n    async deleteEntry(id) {\n        await this._queueDb.deleteEntry(id);\n    }\n    /**\n     * Removes and returns the first or last entry in the queue (based on the\n     * `direction` argument) matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     * @private\n     */\n    async _removeEntry(entry) {\n        if (entry) {\n            await this.deleteEntry(entry.id);\n        }\n        return entry;\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\nconst serializableProperties = [\n    'method',\n    'referrer',\n    'referrerPolicy',\n    'mode',\n    'credentials',\n    'cache',\n    'redirect',\n    'integrity',\n    'keepalive',\n];\n/**\n * A class to make it easier to serialize and de-serialize requests so they\n * can be stored in IndexedDB.\n *\n * Most developers will not need to access this class directly;\n * it is exposed for advanced use cases.\n */\nclass StorableRequest {\n    /**\n     * Converts a Request object to a plain object that can be structured\n     * cloned or JSON-stringified.\n     *\n     * @param {Request} request\n     * @return {Promise<StorableRequest>}\n     */\n    static async fromRequest(request) {\n        const requestData = {\n            url: request.url,\n            headers: {},\n        };\n        // Set the body if present.\n        if (request.method !== 'GET') {\n            // Use ArrayBuffer to support non-text request bodies.\n            // NOTE: we can't use Blobs becuse Safari doesn't support storing\n            // Blobs in IndexedDB in some cases:\n            // https://github.com/dfahlander/Dexie.js/issues/618#issuecomment-398348457\n            requestData.body = await request.clone().arrayBuffer();\n        }\n        // Convert the headers from an iterable to an object.\n        for (const [key, value] of request.headers.entries()) {\n            requestData.headers[key] = value;\n        }\n        // Add all other serializable request properties\n        for (const prop of serializableProperties) {\n            if (request[prop] !== undefined) {\n                requestData[prop] = request[prop];\n            }\n        }\n        return new StorableRequest(requestData);\n    }\n    /**\n     * Accepts an object of request data that can be used to construct a\n     * `Request` but can also be stored in IndexedDB.\n     *\n     * @param {Object} requestData An object of request data that includes the\n     *     `url` plus any relevant properties of\n     *     [requestInit]{@link https://fetch.spec.whatwg.org/#requestinit}.\n     */\n    constructor(requestData) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'StorableRequest',\n                funcName: 'constructor',\n                paramName: 'requestData',\n            });\n            assert.isType(requestData.url, 'string', {\n                moduleName: 'workbox-background-sync',\n                className: 'StorableRequest',\n                funcName: 'constructor',\n                paramName: 'requestData.url',\n            });\n        }\n        // If the request's mode is `navigate`, convert it to `same-origin` since\n        // navigation requests can't be constructed via script.\n        if (requestData['mode'] === 'navigate') {\n            requestData['mode'] = 'same-origin';\n        }\n        this._requestData = requestData;\n    }\n    /**\n     * Returns a deep clone of the instances `_requestData` object.\n     *\n     * @return {Object}\n     */\n    toObject() {\n        const requestData = Object.assign({}, this._requestData);\n        requestData.headers = Object.assign({}, this._requestData.headers);\n        if (requestData.body) {\n            requestData.body = requestData.body.slice(0);\n        }\n        return requestData;\n    }\n    /**\n     * Converts this instance to a Request.\n     *\n     * @return {Request}\n     */\n    toRequest() {\n        return new Request(this._requestData.url, this._requestData);\n    }\n    /**\n     * Creates and returns a deep clone of the instance.\n     *\n     * @return {StorableRequest}\n     */\n    clone() {\n        return new StorableRequest(this.toObject());\n    }\n}\nexport { StorableRequest };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { QueueStore } from './lib/QueueStore.js';\nimport { StorableRequest } from './lib/StorableRequest.js';\nimport './_version.js';\nconst TAG_PREFIX = 'workbox-background-sync';\nconst MAX_RETENTION_TIME = 60 * 24 * 7; // 7 days in minutes\nconst queueNames = new Set();\n/**\n * Converts a QueueStore entry into the format exposed by Queue. This entails\n * converting the request data into a real request and omitting the `id` and\n * `queueName` properties.\n *\n * @param {UnidentifiedQueueStoreEntry} queueStoreEntry\n * @return {Queue}\n * @private\n */\nconst convertEntry = (queueStoreEntry) => {\n    const queueEntry = {\n        request: new StorableRequest(queueStoreEntry.requestData).toRequest(),\n        timestamp: queueStoreEntry.timestamp,\n    };\n    if (queueStoreEntry.metadata) {\n        queueEntry.metadata = queueStoreEntry.metadata;\n    }\n    return queueEntry;\n};\n/**\n * A class to manage storing failed requests in IndexedDB and retrying them\n * later. All parts of the storing and replaying process are observable via\n * callbacks.\n *\n * @memberof workbox-background-sync\n */\nclass Queue {\n    /**\n     * Creates an instance of Queue with the given options\n     *\n     * @param {string} name The unique name for this queue. This name must be\n     *     unique as it's used to register sync events and store requests\n     *     in IndexedDB specific to this instance. An error will be thrown if\n     *     a duplicate name is detected.\n     * @param {Object} [options]\n     * @param {Function} [options.onSync] A function that gets invoked whenever\n     *     the 'sync' event fires. The function is invoked with an object\n     *     containing the `queue` property (referencing this instance), and you\n     *     can use the callback to customize the replay behavior of the queue.\n     *     When not set the `replayRequests()` method is called.\n     *     Note: if the replay fails after a sync event, make sure you throw an\n     *     error, so the browser knows to retry the sync event later.\n     * @param {number} [options.maxRetentionTime=7 days] The amount of time (in\n     *     minutes) a request may be retried. After this amount of time has\n     *     passed, the request will be deleted from the queue.\n     * @param {boolean} [options.forceSyncFallback=false] If `true`, instead\n     *     of attempting to use background sync events, always attempt to replay\n     *     queued request at service worker startup. Most folks will not need\n     *     this, unless you explicitly target a runtime like Electron that\n     *     exposes the interfaces for background sync, but does not have a working\n     *     implementation.\n     */\n    constructor(name, { forceSyncFallback, onSync, maxRetentionTime } = {}) {\n        this._syncInProgress = false;\n        this._requestsAddedDuringSync = false;\n        // Ensure the store name is not already being used\n        if (queueNames.has(name)) {\n            throw new WorkboxError('duplicate-queue-name', { name });\n        }\n        else {\n            queueNames.add(name);\n        }\n        this._name = name;\n        this._onSync = onSync || this.replayRequests;\n        this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME;\n        this._forceSyncFallback = Boolean(forceSyncFallback);\n        this._queueStore = new QueueStore(this._name);\n        this._addSyncListener();\n    }\n    /**\n     * @return {string}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Stores the passed request in IndexedDB (with its timestamp and any\n     * metadata) at the end of the queue.\n     *\n     * @param {QueueEntry} entry\n     * @param {Request} entry.request The request to store in the queue.\n     * @param {Object} [entry.metadata] Any metadata you want associated with the\n     *     stored request. When requests are replayed you'll have access to this\n     *     metadata object in case you need to modify the request beforehand.\n     * @param {number} [entry.timestamp] The timestamp (Epoch time in\n     *     milliseconds) when the request was first added to the queue. This is\n     *     used along with `maxRetentionTime` to remove outdated requests. In\n     *     general you don't need to set this value, as it's automatically set\n     *     for you (defaulting to `Date.now()`), but you can update it if you\n     *     don't want particular requests to expire.\n     */\n    async pushRequest(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'pushRequest',\n                paramName: 'entry',\n            });\n            assert.isInstance(entry.request, Request, {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'pushRequest',\n                paramName: 'entry.request',\n            });\n        }\n        await this._addRequest(entry, 'push');\n    }\n    /**\n     * Stores the passed request in IndexedDB (with its timestamp and any\n     * metadata) at the beginning of the queue.\n     *\n     * @param {QueueEntry} entry\n     * @param {Request} entry.request The request to store in the queue.\n     * @param {Object} [entry.metadata] Any metadata you want associated with the\n     *     stored request. When requests are replayed you'll have access to this\n     *     metadata object in case you need to modify the request beforehand.\n     * @param {number} [entry.timestamp] The timestamp (Epoch time in\n     *     milliseconds) when the request was first added to the queue. This is\n     *     used along with `maxRetentionTime` to remove outdated requests. In\n     *     general you don't need to set this value, as it's automatically set\n     *     for you (defaulting to `Date.now()`), but you can update it if you\n     *     don't want particular requests to expire.\n     */\n    async unshiftRequest(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'unshiftRequest',\n                paramName: 'entry',\n            });\n            assert.isInstance(entry.request, Request, {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'unshiftRequest',\n                paramName: 'entry.request',\n            });\n        }\n        await this._addRequest(entry, 'unshift');\n    }\n    /**\n     * Removes and returns the last request in the queue (along with its\n     * timestamp and any metadata). The returned object takes the form:\n     * `{request, timestamp, metadata}`.\n     *\n     * @return {Promise<QueueEntry | undefined>}\n     */\n    async popRequest() {\n        return this._removeRequest('pop');\n    }\n    /**\n     * Removes and returns the first request in the queue (along with its\n     * timestamp and any metadata). The returned object takes the form:\n     * `{request, timestamp, metadata}`.\n     *\n     * @return {Promise<QueueEntry | undefined>}\n     */\n    async shiftRequest() {\n        return this._removeRequest('shift');\n    }\n    /**\n     * Returns all the entries that have not expired (per `maxRetentionTime`).\n     * Any expired entries are removed from the queue.\n     *\n     * @return {Promise<Array<QueueEntry>>}\n     */\n    async getAll() {\n        const allEntries = await this._queueStore.getAll();\n        const now = Date.now();\n        const unexpiredEntries = [];\n        for (const entry of allEntries) {\n            // Ignore requests older than maxRetentionTime. Call this function\n            // recursively until an unexpired request is found.\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                await this._queueStore.deleteEntry(entry.id);\n            }\n            else {\n                unexpiredEntries.push(convertEntry(entry));\n            }\n        }\n        return unexpiredEntries;\n    }\n    /**\n     * Returns the number of entries present in the queue.\n     * Note that expired entries (per `maxRetentionTime`) are also included in this count.\n     *\n     * @return {Promise<number>}\n     */\n    async size() {\n        return await this._queueStore.size();\n    }\n    /**\n     * Adds the entry to the QueueStore and registers for a sync event.\n     *\n     * @param {Object} entry\n     * @param {Request} entry.request\n     * @param {Object} [entry.metadata]\n     * @param {number} [entry.timestamp=Date.now()]\n     * @param {string} operation ('push' or 'unshift')\n     * @private\n     */\n    async _addRequest({ request, metadata, timestamp = Date.now() }, operation) {\n        const storableRequest = await StorableRequest.fromRequest(request.clone());\n        const entry = {\n            requestData: storableRequest.toObject(),\n            timestamp,\n        };\n        // Only include metadata if it's present.\n        if (metadata) {\n            entry.metadata = metadata;\n        }\n        switch (operation) {\n            case 'push':\n                await this._queueStore.pushEntry(entry);\n                break;\n            case 'unshift':\n                await this._queueStore.unshiftEntry(entry);\n                break;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`Request for '${getFriendlyURL(request.url)}' has ` +\n                `been added to background sync queue '${this._name}'.`);\n        }\n        // Don't register for a sync if we're in the middle of a sync. Instead,\n        // we wait until the sync is complete and call register if\n        // `this._requestsAddedDuringSync` is true.\n        if (this._syncInProgress) {\n            this._requestsAddedDuringSync = true;\n        }\n        else {\n            await this.registerSync();\n        }\n    }\n    /**\n     * Removes and returns the first or last (depending on `operation`) entry\n     * from the QueueStore that's not older than the `maxRetentionTime`.\n     *\n     * @param {string} operation ('pop' or 'shift')\n     * @return {Object|undefined}\n     * @private\n     */\n    async _removeRequest(operation) {\n        const now = Date.now();\n        let entry;\n        switch (operation) {\n            case 'pop':\n                entry = await this._queueStore.popEntry();\n                break;\n            case 'shift':\n                entry = await this._queueStore.shiftEntry();\n                break;\n        }\n        if (entry) {\n            // Ignore requests older than maxRetentionTime. Call this function\n            // recursively until an unexpired request is found.\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                return this._removeRequest(operation);\n            }\n            return convertEntry(entry);\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * Loops through each request in the queue and attempts to re-fetch it.\n     * If any request fails to re-fetch, it's put back in the same position in\n     * the queue (which registers a retry for the next sync event).\n     */\n    async replayRequests() {\n        let entry;\n        while ((entry = await this.shiftRequest())) {\n            try {\n                await fetch(entry.request.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Request for '${getFriendlyURL(entry.request.url)}' ` +\n                        `has been replayed in queue '${this._name}'`);\n                }\n            }\n            catch (error) {\n                await this.unshiftRequest(entry);\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Request for '${getFriendlyURL(entry.request.url)}' ` +\n                        `failed to replay, putting it back in queue '${this._name}'`);\n                }\n                throw new WorkboxError('queue-replay-failed', { name: this._name });\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`All requests in queue '${this.name}' have successfully ` +\n                `replayed; the queue is now empty!`);\n        }\n    }\n    /**\n     * Registers a sync event with a tag unique to this instance.\n     */\n    async registerSync() {\n        // See https://github.com/GoogleChrome/workbox/issues/2393\n        if ('sync' in self.registration && !this._forceSyncFallback) {\n            try {\n                await self.registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n            }\n            catch (err) {\n                // This means the registration failed for some reason, possibly due to\n                // the user disabling it.\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to register sync event for '${this._name}'.`, err);\n                }\n            }\n        }\n    }\n    /**\n     * In sync-supporting browsers, this adds a listener for the sync event.\n     * In non-sync-supporting browsers, or if _forceSyncFallback is true, this\n     * will retry the queue on service worker startup.\n     *\n     * @private\n     */\n    _addSyncListener() {\n        // See https://github.com/GoogleChrome/workbox/issues/2393\n        if ('sync' in self.registration && !this._forceSyncFallback) {\n            self.addEventListener('sync', (event) => {\n                if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.log(`Background sync for tag '${event.tag}' ` + `has been received`);\n                    }\n                    const syncComplete = async () => {\n                        this._syncInProgress = true;\n                        let syncError;\n                        try {\n                            await this._onSync({ queue: this });\n                        }\n                        catch (error) {\n                            if (error instanceof Error) {\n                                syncError = error;\n                                // Rethrow the error. Note: the logic in the finally clause\n                                // will run before this gets rethrown.\n                                throw syncError;\n                            }\n                        }\n                        finally {\n                            // New items may have been added to the queue during the sync,\n                            // so we need to register for a new sync if that's happened...\n                            // Unless there was an error during the sync, in which\n                            // case the browser will automatically retry later, as long\n                            // as `event.lastChance` is not true.\n                            if (this._requestsAddedDuringSync &&\n                                !(syncError && !event.lastChance)) {\n                                await this.registerSync();\n                            }\n                            this._syncInProgress = false;\n                            this._requestsAddedDuringSync = false;\n                        }\n                    };\n                    event.waitUntil(syncComplete());\n                }\n            });\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Background sync replaying without background sync event`);\n            }\n            // If the browser doesn't support background sync, or the developer has\n            // opted-in to not using it, retry every time the service worker starts up\n            // as a fallback.\n            void this._onSync({ queue: this });\n        }\n    }\n    /**\n     * Returns the set of queue names. This is primarily used to reset the list\n     * of queue names in tests.\n     *\n     * @return {Set<string>}\n     *\n     * @private\n     */\n    static get _queueNames() {\n        return queueNames;\n    }\n}\nexport { Queue };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Queue } from './Queue.js';\nimport './_version.js';\n/**\n * A class implementing the `fetchDidFail` lifecycle callback. This makes it\n * easier to add failed requests to a background sync Queue.\n *\n * @memberof workbox-background-sync\n */\nclass BackgroundSyncPlugin {\n    /**\n     * @param {string} name See the {@link workbox-background-sync.Queue}\n     *     documentation for parameter details.\n     * @param {Object} [options] See the\n     *     {@link workbox-background-sync.Queue} documentation for\n     *     parameter details.\n     */\n    constructor(name, options) {\n        /**\n         * @param {Object} options\n         * @param {Request} options.request\n         * @private\n         */\n        this.fetchDidFail = async ({ request }) => {\n            await this._queue.pushRequest({ request });\n        };\n        this._queue = new Queue(name, options);\n    }\n}\nexport { BackgroundSyncPlugin };\n","// src/sw.js\r\n\r\nimport { precacheAndRoute } from 'workbox-precaching';\r\nimport { registerRoute } from 'workbox-routing';\r\nimport { NetworkOnly } from 'workbox-strategies';\r\nimport { BackgroundSyncPlugin } from 'workbox-background-sync';\r\n\r\n// This is required for injectManifest to work\r\nprecacheAndRoute(self.__WB_MANIFEST || []);\r\n\r\n// Background sync plugin for POST/PUT/DELETE requests to /api/*\r\nconst bgSyncPlugin = new BackgroundSyncPlugin('api-queue', {\r\n  maxRetentionTime: 24 * 60, // Retry up to 24 hours\r\n});\r\n\r\nregisterRoute(\r\n  ({ url, request }) =>\r\n    url.pathname.startsWith('/api') &&\r\n    ['POST', 'PUT', 'DELETE'].includes(request.method),\r\n  new NetworkOnly({\r\n    plugins: [bgSyncPlugin],\r\n  })\r\n);\r\n\r\n// Activate service worker immediately on install/activate\r\nself.addEventListener('install', () => self.skipWaiting());\r\nself.addEventListener('activate', () => self.clients.claim());\r\n"]}
try{self["workbox:core:7.2.0"]&&_()}catch{}const ne={"invalid-value":({paramName:t,validValueDescription:e,value:r})=>{if(!t||!e)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${t}' parameter was given a value with an unexpected value. ${e} Received a value of ${JSON.stringify(r)}.`},"not-an-array":({moduleName:t,className:e,funcName:r,paramName:s})=>{if(!t||!e||!r||!s)throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${s}' passed into '${t}.${e}.${r}()' must be an array.`},"incorrect-type":({expectedType:t,paramName:e,moduleName:r,className:s,funcName:n})=>{if(!t||!e||!r||!n)throw new Error("Unexpected input to 'incorrect-type' error.");const a=s?`${s}.`:"";return`The parameter '${e}' passed into '${r}.${a}${n}()' must be of type ${t}.`},"incorrect-class":({expectedClassName:t,paramName:e,moduleName:r,className:s,funcName:n,isReturnValueProblem:a})=>{if(!t||!r||!n)throw new Error("Unexpected input to 'incorrect-class' error.");const o=s?`${s}.`:"";return a?`The return value from '${r}.${o}${n}()' must be an instance of class ${t}.`:`The parameter '${e}' passed into '${r}.${o}${n}()' must be an instance of class ${t}.`},"missing-a-method":({expectedMethod:t,paramName:e,moduleName:r,className:s,funcName:n})=>{if(!t||!e||!r||!s||!n)throw new Error("Unexpected input to 'missing-a-method' error.");return`${r}.${s}.${n}() expected the '${e}' parameter to expose a '${t}' method.`},"add-to-cache-list-unexpected-type":({entry:t})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(t)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:t,secondEntry:e})=>{if(!t||!e)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${t} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownErrorMessage:t})=>{if(!t)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${t}'.`},"invalid-cache-name":({cacheNameId:t,value:e})=>{if(!t)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${t}: '...'}). Received a value of '${JSON.stringify(e)}'`},"unregister-route-but-not-found-with-method":({method:t})=>{if(!t)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${t}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:t})=>`Replaying the background sync queue '${t}' failed.`,"duplicate-queue-name":({name:t})=>`The Queue name '${t}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:t,paramName:e})=>`The '${t}()' method can only be used when the '${e}' is used in the constructor.`,"unsupported-route-type":({moduleName:t,className:e,funcName:r,paramName:s})=>`The supplied '${s}' parameter was an unsupported type. Please check the docs for ${t}.${e}.${r} for valid input types.`,"not-array-of-class":({value:t,expectedClass:e,moduleName:r,className:s,funcName:n,paramName:a})=>`The supplied '${a}' parameter must be an array of '${e}' objects. Received '${JSON.stringify(t)},'. Please check the call to ${r}.${s}.${n}() to fix the issue.`,"max-entries-or-age-required":({moduleName:t,className:e,funcName:r})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${t}.${e}.${r}`,"statuses-or-headers-required":({moduleName:t,className:e,funcName:r})=>`You must define either config.statuses or config.headersin ${t}.${e}.${r}`,"invalid-string":({moduleName:t,funcName:e,paramName:r})=>{if(!r||!t||!e)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${r}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${t}.${e}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:t})=>{if(!t)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${t}"`},"single-range-only":({normalizedRangeHeader:t})=>{if(!t)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${t}"`},"invalid-range-values":({normalizedRangeHeader:t})=>{if(!t)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${t}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:t,start:e,end:r})=>`The start (${e}) and end (${r}) values in the Range are not satisfiable by the cached response, which is ${t} bytes.`,"attempt-to-cache-non-get-request":({url:t,method:e})=>`Unable to cache '${t}' because it is a '${e}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:t})=>`There was an attempt to cache '${t}' but the response was not defined.`,"no-response":({url:t,error:e})=>{let r=`The strategy could not generate a response for '${t}'.`;return e&&(r+=` The underlying error is ${e}.`),r},"bad-precaching-response":({url:t,status:e})=>`The precaching request for '${t}' failed`+(e?` with an HTTP status of ${e}.`:"."),"non-precached-url":({url:t})=>`createHandlerBoundToURL('${t}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:t})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${t} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:t,url:e})=>`Unable to find a precached response in ${t} for ${e}.`,"cross-origin-copy-response":({origin:t})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${t}.`,"opaque-streams-source":({type:t})=>{const e=`One of the workbox-streams sources resulted in an '${t}' response.`;return t==="opaqueredirect"?`${e} Please do not use a navigation request that results in a redirect as a source.`:`${e} Please ensure your sources are CORS-enabled.`}},ae=(t,e={})=>{const r=ne[t];if(!r)throw new Error(`Unable to find message for code '${t}'.`);return r(e)},oe=ae;class l extends Error{constructor(e,r){const s=oe(e,r);super(s),this.name=e,this.details=r}}const ie=(t,e)=>{if(!Array.isArray(t))throw new l("not-an-array",e)},ce=(t,e,r)=>{if(typeof t[e]!=="function")throw r.expectedMethod=e,new l("missing-a-method",r)},ue=(t,e,r)=>{if(typeof t!==e)throw r.expectedType=e,new l("incorrect-type",r)},le=(t,e,r)=>{if(!(t instanceof e))throw r.expectedClassName=e.name,new l("incorrect-class",r)},he=(t,e,r)=>{if(!e.includes(t))throw r.validValueDescription=`Valid values are ${JSON.stringify(e)}.`,new l("invalid-value",r)},de=(t,e,r)=>{const s=new l("not-array-of-class",r);if(!Array.isArray(t))throw s;for(const n of t)if(!(n instanceof e))throw s},d={hasMethod:ce,isArray:ie,isInstance:le,isOneOf:he,isType:ue,isArrayOfClass:de},m={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:typeof registration<"u"?registration.scope:""},v=t=>[m.prefix,t,m.suffix].filter(e=>e&&e.length>0).join("-"),fe=t=>{for(const e of Object.keys(m))t(e)},A={updateDetails:t=>{fe(e=>{typeof t[e]=="string"&&(m[e]=t[e])})},getGoogleAnalyticsName:t=>t||v(m.googleAnalytics),getPrecacheName:t=>t||v(m.precache),getPrefix:()=>m.prefix,getRuntimeName:t=>t||v(m.runtime),getSuffix:()=>m.suffix},i=(()=>{"__WB_DISABLE_DEV_LOGS"in globalThis||(self.__WB_DISABLE_DEV_LOGS=!1);let t=!1;const e={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},r=function(a,o){if(self.__WB_DISABLE_DEV_LOGS)return;if(a==="groupCollapsed"&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent)){console[a](...o);return}const c=[`background: ${e[a]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"],u=t?[]:["%cworkbox",c.join(";")];console[a](...u,...o),a==="groupCollapsed"&&(t=!0),a==="groupEnd"&&(t=!1)},s={},n=Object.keys(e);for(const a of n){const o=a;s[o]=(...c)=>{r(o,c)}}return s})();function M(t,e){const r=e();return t.waitUntil(r),r}try{self["workbox:precaching:7.2.0"]&&_()}catch{}const pe="__WB_REVISION__";function ge(t){if(!t)throw new l("add-to-cache-list-unexpected-type",{entry:t});if(typeof t=="string"){const a=new URL(t,location.href);return{cacheKey:a.href,url:a.href}}const{revision:e,url:r}=t;if(!r)throw new l("add-to-cache-list-unexpected-type",{entry:t});if(!e){const a=new URL(r,location.href);return{cacheKey:a.href,url:a.href}}const s=new URL(r,location.href),n=new URL(r,location.href);return s.searchParams.set(pe,e),{cacheKey:s.href,url:n.href}}class ye{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:r})=>{r&&(r.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:r,cachedResponse:s})=>{if(e.type==="install"&&r&&r.originalRequest&&r.originalRequest instanceof Request){const n=r.originalRequest.url;s?this.notUpdatedURLs.push(n):this.updatedURLs.push(n)}return s}}}class me{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:r,params:s})=>{const n=(s==null?void 0:s.cacheKey)||this._precacheController.getCacheKeyForURL(r.url);return n?new Request(n,{headers:r.headers}):r},this._precacheController=e}}const we=(t,e)=>{i.groupCollapsed(t);for(const r of e)i.log(r);i.groupEnd()};function be(t){const e=t.length;e>0&&(i.groupCollapsed(`During precaching cleanup, ${e} cached request${e===1?" was":"s were"} deleted.`),we("Deleted Cache Requests",t),i.groupEnd())}function B(t,e){if(e.length!==0){i.groupCollapsed(t);for(const r of e)i.log(r);i.groupEnd()}}function Re(t,e){const r=t.length,s=e.length;if(r||s){let n=`Precaching ${r} file${r===1?"":"s"}.`;s>0&&(n+=` ${s} file${s===1?" is":"s are"} already cached.`),i.groupCollapsed(n),B("View newly precached URLs.",t),B("View previously precached URLs.",e),i.groupEnd()}}let E;function _e(){if(E===void 0){const t=new Response("");if("body"in t)try{new Response(t.body),E=!0}catch{E=!1}E=!1}return E}async function Ee(t,e){let r=null;if(t.url&&(r=new URL(t.url).origin),r!==self.location.origin)throw new l("cross-origin-copy-response",{origin:r});const s=t.clone(),a={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},o=_e()?s.body:await s.blob();return new Response(o,a)}const h=t=>new URL(String(t),location.href).href.replace(new RegExp(`^${location.origin}`),"");function j(t,e){const r=new URL(t);for(const s of e)r.searchParams.delete(s);return r.href}async function Ce(t,e,r,s){const n=j(e.url,r);if(e.url===n)return t.match(e,s);const a=Object.assign(Object.assign({},s),{ignoreSearch:!0}),o=await t.keys(e,a);for(const c of o){const u=j(c.url,r);if(n===u)return t.match(c,s)}}class Ne{constructor(){this.promise=new Promise((e,r)=>{this.resolve=e,this.reject=r})}}const F=new Set;async function ke(){i.log(`About to run ${F.size} callbacks to clean up caches.`);for(const t of F)await t(),i.log(t,"is complete.");i.log("Finished running callbacks.")}function z(t){return new Promise(e=>setTimeout(e,t))}try{self["workbox:strategies:7.2.0"]&&_()}catch{}function q(t){return typeof t=="string"?new Request(t):t}class $e{constructor(e,r){this._cacheKeys={},d.isInstance(r.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,r),this.event=r.event,this._strategy=e,this._handlerDeferred=new Ne,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const s of this._plugins)this._pluginStateMap.set(s,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:r}=this;let s=q(e);if(s.mode==="navigate"&&r instanceof FetchEvent&&r.preloadResponse){const o=await r.preloadResponse;if(o)return i.log(`Using a preloaded navigation response for '${h(s.url)}'`),o}const n=this.hasCallback("fetchDidFail")?s.clone():null;try{for(const o of this.iterateCallbacks("requestWillFetch"))s=await o({request:s.clone(),event:r})}catch(o){if(o instanceof Error)throw new l("plugin-error-request-will-fetch",{thrownErrorMessage:o.message})}const a=s.clone();try{let o;o=await fetch(s,s.mode==="navigate"?void 0:this._strategy.fetchOptions),i.debug(`Network request for '${h(s.url)}' returned a response with status '${o.status}'.`);for(const c of this.iterateCallbacks("fetchDidSucceed"))o=await c({event:r,request:a,response:o});return o}catch(o){throw i.log(`Network request for '${h(s.url)}' threw an error.`,o),n&&await this.runCallbacks("fetchDidFail",{error:o,event:r,originalRequest:n.clone(),request:a.clone()}),o}}async fetchAndCachePut(e){const r=await this.fetch(e),s=r.clone();return this.waitUntil(this.cachePut(e,s)),r}async cacheMatch(e){const r=q(e);let s;const{cacheName:n,matchOptions:a}=this._strategy,o=await this.getCacheKey(r,"read"),c=Object.assign(Object.assign({},a),{cacheName:n});s=await caches.match(o,c),s?i.debug(`Found a cached response in '${n}'.`):i.debug(`No cached response found in '${n}'.`);for(const u of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await u({cacheName:n,matchOptions:a,cachedResponse:s,request:o,event:this.event})||void 0;return s}async cachePut(e,r){const s=q(e);await z(0);const n=await this.getCacheKey(s,"write");{if(n.method&&n.method!=="GET")throw new l("attempt-to-cache-non-get-request",{url:h(n.url),method:n.method});const p=r.headers.get("Vary");p&&i.debug(`The response for ${h(n.url)} has a 'Vary: ${p}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`)}if(!r)throw i.error(`Cannot cache non-existent response for '${h(n.url)}'.`),new l("cache-put-with-no-response",{url:h(n.url)});const a=await this._ensureResponseSafeToCache(r);if(!a)return i.debug(`Response '${h(n.url)}' will not be cached.`,a),!1;const{cacheName:o,matchOptions:c}=this._strategy,u=await self.caches.open(o),f=this.hasCallback("cacheDidUpdate"),w=f?await Ce(u,n.clone(),["__WB_REVISION__"],c):null;i.debug(`Updating the '${o}' cache with a new Response for ${h(n.url)}.`);try{await u.put(n,f?a.clone():a)}catch(p){if(p instanceof Error)throw p.name==="QuotaExceededError"&&await ke(),p}for(const p of this.iterateCallbacks("cacheDidUpdate"))await p({cacheName:o,oldResponse:w,newResponse:a.clone(),request:n,event:this.event});return!0}async getCacheKey(e,r){const s=`${e.url} | ${r}`;if(!this._cacheKeys[s]){let n=e;for(const a of this.iterateCallbacks("cacheKeyWillBeUsed"))n=q(await a({mode:r,request:n,event:this.event,params:this.params}));this._cacheKeys[s]=n}return this._cacheKeys[s]}hasCallback(e){for(const r of this._strategy.plugins)if(e in r)return!0;return!1}async runCallbacks(e,r){for(const s of this.iterateCallbacks(e))await s(r)}*iterateCallbacks(e){for(const r of this._strategy.plugins)if(typeof r[e]=="function"){const s=this._pluginStateMap.get(r);yield a=>{const o=Object.assign(Object.assign({},a),{state:s});return r[e](o)}}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let r=e,s=!1;for(const n of this.iterateCallbacks("cacheWillUpdate"))if(r=await n({request:this.request,response:r,event:this.event})||void 0,s=!0,!r)break;return s||(r&&r.status!==200&&(r=void 0),r&&r.status!==200&&(r.status===0?i.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):i.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),r}}class X{constructor(e={}){this.cacheName=A.getRuntimeName(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[r]=this.handleAll(e);return r}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const r=e.event,s=typeof e.request=="string"?new Request(e.request):e.request,n="params"in e?e.params:void 0,a=new $e(this,{event:r,request:s,params:n}),o=this._getResponse(a,s,r),c=this._awaitComplete(o,a,s,r);return[o,c]}async _getResponse(e,r,s){await e.runCallbacks("handlerWillStart",{event:s,request:r});let n;try{if(n=await this._handle(r,e),!n||n.type==="error")throw new l("no-response",{url:r.url})}catch(a){if(a instanceof Error){for(const o of e.iterateCallbacks("handlerDidError"))if(n=await o({error:a,event:s,request:r}),n)break}if(n)i.log(`While responding to '${h(r.url)}', an ${a instanceof Error?a.toString():""} error occurred. Using a fallback response provided by a handlerDidError plugin.`);else throw a}for(const a of e.iterateCallbacks("handlerWillRespond"))n=await a({event:s,request:r,response:n});return n}async _awaitComplete(e,r,s,n){let a,o;try{a=await e}catch{}try{await r.runCallbacks("handlerDidRespond",{event:n,request:s,response:a}),await r.doneWaiting()}catch(c){c instanceof Error&&(o=c)}if(await r.runCallbacks("handlerDidComplete",{event:n,request:s,response:a,error:o}),r.destroy(),o)throw o}}class b extends X{constructor(e={}){e.cacheName=A.getPrecacheName(e.cacheName),super(e),this._fallbackToNetwork=e.fallbackToNetwork!==!1,this.plugins.push(b.copyRedirectedCacheableResponsesPlugin)}async _handle(e,r){const s=await r.cacheMatch(e);return s||(r.event&&r.event.type==="install"?await this._handleInstall(e,r):await this._handleFetch(e,r))}async _handleFetch(e,r){let s;const n=r.params||{};if(this._fallbackToNetwork){i.warn(`The precached response for ${h(e.url)} in ${this.cacheName} was not found. Falling back to the network.`);const a=n.integrity,o=e.integrity,c=!o||o===a;s=await r.fetch(new Request(e,{integrity:e.mode!=="no-cors"?o||a:void 0})),a&&c&&e.mode!=="no-cors"&&(this._useDefaultCacheabilityPluginIfNeeded(),await r.cachePut(e,s.clone())&&i.log(`A response for ${h(e.url)} was used to "repair" the precache.`))}else throw new l("missing-precache-entry",{cacheName:this.cacheName,url:e.url});{const a=n.cacheKey||await r.getCacheKey(e,"read");i.groupCollapsed("Precaching is responding to: "+h(e.url)),i.log(`Serving the precached url: ${h(a instanceof Request?a.url:a)}`),i.groupCollapsed("View request details here."),i.log(e),i.groupEnd(),i.groupCollapsed("View response details here."),i.log(s),i.groupEnd(),i.groupEnd()}return s}async _handleInstall(e,r){this._useDefaultCacheabilityPluginIfNeeded();const s=await r.fetch(e);if(!await r.cachePut(e,s.clone()))throw new l("bad-precaching-response",{url:e.url,status:s.status});return s}_useDefaultCacheabilityPluginIfNeeded(){let e=null,r=0;for(const[s,n]of this.plugins.entries())n!==b.copyRedirectedCacheableResponsesPlugin&&(n===b.defaultPrecacheCacheabilityPlugin&&(e=s),n.cacheWillUpdate&&r++);r===0?this.plugins.push(b.defaultPrecacheCacheabilityPlugin):r>1&&e!==null&&this.plugins.splice(e,1)}}b.defaultPrecacheCacheabilityPlugin={async cacheWillUpdate({response:t}){return!t||t.status>=400?null:t}};b.copyRedirectedCacheableResponsesPlugin={async cacheWillUpdate({response:t}){return t.redirected?await Ee(t):t}};class qe{constructor({cacheName:e,plugins:r=[],fallbackToNetwork:s=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new b({cacheName:A.getPrecacheName(e),plugins:[...r,new me({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){d.isArray(e,{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"});const r=[];for(const s of e){typeof s=="string"?r.push(s):s&&s.revision===void 0&&r.push(s.url);const{cacheKey:n,url:a}=ge(s),o=typeof s!="string"&&s.revision?"reload":"default";if(this._urlsToCacheKeys.has(a)&&this._urlsToCacheKeys.get(a)!==n)throw new l("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(a),secondEntry:n});if(typeof s!="string"&&s.integrity){if(this._cacheKeysToIntegrities.has(n)&&this._cacheKeysToIntegrities.get(n)!==s.integrity)throw new l("add-to-cache-list-conflicting-integrities",{url:a});this._cacheKeysToIntegrities.set(n,s.integrity)}if(this._urlsToCacheKeys.set(a,n),this._urlsToCacheModes.set(a,o),r.length>0){const c=`Workbox is precaching URLs without revision info: ${r.join(", ")}
This is generally NOT safe. Learn more at https://bit.ly/wb-precache`;i.warn(c)}}}install(e){return M(e,async()=>{const r=new ye;this.strategy.plugins.push(r);for(const[a,o]of this._urlsToCacheKeys){const c=this._cacheKeysToIntegrities.get(o),u=this._urlsToCacheModes.get(a),f=new Request(a,{integrity:c,cache:u,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:o},request:f,event:e}))}const{updatedURLs:s,notUpdatedURLs:n}=r;return Re(s,n),{updatedURLs:s,notUpdatedURLs:n}})}activate(e){return M(e,async()=>{const r=await self.caches.open(this.strategy.cacheName),s=await r.keys(),n=new Set(this._urlsToCacheKeys.values()),a=[];for(const o of s)n.has(o.url)||(await r.delete(o),a.push(o.url));return be(a),{deletedURLs:a}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const r=new URL(e,location.href);return this._urlsToCacheKeys.get(r.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const r=e instanceof Request?e.url:e,s=this.getCacheKeyForURL(r);if(s)return(await self.caches.open(this.strategy.cacheName)).match(s)}createHandlerBoundToURL(e){const r=this.getCacheKeyForURL(e);if(!r)throw new l("non-precached-url",{url:e});return s=>(s.request=new Request(e),s.params=Object.assign({cacheKey:r},s.params),this.strategy.handle(s))}}let x;const Z=()=>(x||(x=new qe),x);try{self["workbox:routing:7.2.0"]&&_()}catch{}const ee="GET",Te=["DELETE","GET","HEAD","PATCH","POST","PUT"],T=t=>t&&typeof t=="object"?(d.hasMethod(t,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),t):(d.isType(t,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:t});class k{constructor(e,r,s=ee){d.isType(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),s&&d.isOneOf(s,Te,{paramName:"method"}),this.handler=T(r),this.match=e,this.method=s}setCatchHandler(e){this.catchHandler=T(e)}}class ve extends k{constructor(e,r,s){d.isInstance(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});const n=({url:a})=>{const o=e.exec(a.href);if(o){if(a.origin!==location.origin&&o.index!==0){i.debug(`The regular expression '${e.toString()}' only partially matched against the cross-origin URL '${a.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`);return}return o.slice(1)}};super(n,r,s)}}class xe{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:r}=e,s=this.handleRequest({request:r,event:e});s&&e.respondWith(s)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&e.data.type==="CACHE_URLS"){const{payload:r}=e.data;i.debug("Caching URLs from the window",r.urlsToCache);const s=Promise.all(r.urlsToCache.map(n=>{typeof n=="string"&&(n=[n]);const a=new Request(...n);return this.handleRequest({request:a,event:e})}));e.waitUntil(s),e.ports&&e.ports[0]&&s.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:r}){d.isInstance(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const s=new URL(e.url,location.href);if(!s.protocol.startsWith("http")){i.debug("Workbox Router only supports URLs that start with 'http'.");return}const n=s.origin===location.origin,{params:a,route:o}=this.findMatchingRoute({event:r,request:e,sameOrigin:n,url:s});let c=o&&o.handler;const u=[];c&&(u.push(["Found a route to handle this request:",o]),a&&u.push(["Passing the following params to the route's handler:",a]));const f=e.method;if(!c&&this._defaultHandlerMap.has(f)&&(u.push(`Failed to find a matching route. Falling back to the default handler for ${f}.`),c=this._defaultHandlerMap.get(f)),!c){i.debug(`No route found for: ${h(s)}`);return}i.groupCollapsed(`Router is responding to: ${h(s)}`),u.forEach(g=>{Array.isArray(g)?i.log(...g):i.log(g)}),i.groupEnd();let w;try{w=c.handle({url:s,request:e,event:r,params:a})}catch(g){w=Promise.reject(g)}const p=o&&o.catchHandler;return w instanceof Promise&&(this._catchHandler||p)&&(w=w.catch(async g=>{if(p){i.groupCollapsed(`Error thrown when responding to:  ${h(s)}. Falling back to route's Catch Handler.`),i.error("Error thrown by:",o),i.error(g),i.groupEnd();try{return await p.handle({url:s,request:e,event:r,params:a})}catch(K){K instanceof Error&&(g=K)}}if(this._catchHandler)return i.groupCollapsed(`Error thrown when responding to:  ${h(s)}. Falling back to global Catch Handler.`),i.error("Error thrown by:",o),i.error(g),i.groupEnd(),this._catchHandler.handle({url:s,request:e,event:r});throw g})),w}findMatchingRoute({url:e,sameOrigin:r,request:s,event:n}){const a=this._routes.get(s.method)||[];for(const o of a){let c;const u=o.match({url:e,sameOrigin:r,request:s,event:n});if(u)return u instanceof Promise&&i.warn(`While routing ${h(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,o),c=u,(Array.isArray(c)&&c.length===0||u.constructor===Object&&Object.keys(u).length===0||typeof u=="boolean")&&(c=void 0),{route:o,params:c}}return{}}setDefaultHandler(e,r=ee){this._defaultHandlerMap.set(r,T(e))}setCatchHandler(e){this._catchHandler=T(e)}registerRoute(e){d.isType(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),d.hasMethod(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),d.isType(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),d.hasMethod(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),d.isType(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new l("unregister-route-but-not-found-with-method",{method:e.method});const r=this._routes.get(e.method).indexOf(e);if(r>-1)this._routes.get(e.method).splice(r,1);else throw new l("unregister-route-route-not-registered")}}let C;const De=()=>(C||(C=new xe,C.addFetchListener(),C.addCacheListener()),C);function te(t,e,r){let s;if(typeof t=="string"){const a=new URL(t,location.href);{if(!(t.startsWith("/")||t.startsWith("http")))throw new l("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const c=t.startsWith("http")?a.pathname:t,u="[*:?+]";new RegExp(`${u}`).exec(c)&&i.debug(`The '$capture' parameter contains an Express-style wildcard character (${u}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}const o=({url:c})=>(c.pathname===a.pathname&&c.origin!==a.origin&&i.debug(`${t} only partially matches the cross-origin URL ${c.toString()}. This route will only handle cross-origin requests if they match the entire URL.`),c.href===a.href);s=new k(o,e,r)}else if(t instanceof RegExp)s=new ve(t,e,r);else if(typeof t=="function")s=new k(t,e,r);else if(t instanceof k)s=t;else throw new l("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});return De().registerRoute(s),s}function Ue(t,e=[]){for(const r of[...t.searchParams.keys()])e.some(s=>s.test(r))&&t.searchParams.delete(r);return t}function*Le(t,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:r="index.html",cleanURLs:s=!0,urlManipulation:n}={}){const a=new URL(t,location.href);a.hash="",yield a.href;const o=Ue(a,e);if(yield o.href,r&&o.pathname.endsWith("/")){const c=new URL(o.href);c.pathname+=r,yield c.href}if(s){const c=new URL(o.href);c.pathname+=".html",yield c.href}if(n){const c=n({url:a});for(const u of c)yield u.href}}class Pe extends k{constructor(e,r){const s=({request:n})=>{const a=e.getURLsToCacheKeys();for(const o of Le(n.url,r)){const c=a.get(o);if(c){const u=e.getIntegrityForCacheKey(c);return{cacheKey:c,integrity:u}}}i.debug("Precaching did not find a match for "+h(n.url))};super(s,e.strategy)}}function Se(t){const e=Z(),r=new Pe(e,t);te(r)}function Ie(t){Z().precache(t)}function Ae(t,e){Ie(t),Se(e)}const W={strategyStart:(t,e)=>`Using ${t} to respond to '${h(e.url)}'`,printFinalResponse:t=>{t&&(i.groupCollapsed("View the final response here."),i.log(t||"[No response returned]"),i.groupEnd())}};class Oe extends X{constructor(e={}){super(e),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0}async _handle(e,r){d.isInstance(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"_handle",paramName:"request"});let s,n;try{const a=[r.fetch(e)];if(this._networkTimeoutSeconds){const o=z(this._networkTimeoutSeconds*1e3);a.push(o)}if(n=await Promise.race(a),!n)throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`)}catch(a){a instanceof Error&&(s=a)}if(i.groupCollapsed(W.strategyStart(this.constructor.name,e)),n?i.log("Got response from network."):i.log("Unable to get a response from the network."),W.printFinalResponse(n),i.groupEnd(),!n)throw new l("no-response",{url:e.url,error:s});return n}}const Ke=(t,e)=>e.some(r=>t instanceof r);let Q,H;function Me(){return Q||(Q=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function Be(){return H||(H=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}const re=new WeakMap,S=new WeakMap,se=new WeakMap,D=new WeakMap,O=new WeakMap;function je(t){const e=new Promise((r,s)=>{const n=()=>{t.removeEventListener("success",a),t.removeEventListener("error",o)},a=()=>{r(R(t.result)),n()},o=()=>{s(t.error),n()};t.addEventListener("success",a),t.addEventListener("error",o)});return e.then(r=>{r instanceof IDBCursor&&re.set(r,t)}).catch(()=>{}),O.set(e,t),e}function Fe(t){if(S.has(t))return;const e=new Promise((r,s)=>{const n=()=>{t.removeEventListener("complete",a),t.removeEventListener("error",o),t.removeEventListener("abort",o)},a=()=>{r(),n()},o=()=>{s(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",a),t.addEventListener("error",o),t.addEventListener("abort",o)});S.set(t,e)}let I={get(t,e,r){if(t instanceof IDBTransaction){if(e==="done")return S.get(t);if(e==="objectStoreNames")return t.objectStoreNames||se.get(t);if(e==="store")return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return R(t[e])},set(t,e,r){return t[e]=r,!0},has(t,e){return t instanceof IDBTransaction&&(e==="done"||e==="store")?!0:e in t}};function We(t){I=t(I)}function Qe(t){return t===IDBDatabase.prototype.transaction&&!("objectStoreNames"in IDBTransaction.prototype)?function(e,...r){const s=t.call(U(this),e,...r);return se.set(s,e.sort?e.sort():[e]),R(s)}:Be().includes(t)?function(...e){return t.apply(U(this),e),R(re.get(this))}:function(...e){return R(t.apply(U(this),e))}}function He(t){return typeof t=="function"?Qe(t):(t instanceof IDBTransaction&&Fe(t),Ke(t,Me())?new Proxy(t,I):t)}function R(t){if(t instanceof IDBRequest)return je(t);if(D.has(t))return D.get(t);const e=He(t);return e!==t&&(D.set(t,e),O.set(e,t)),e}const U=t=>O.get(t);function Ve(t,e,{blocked:r,upgrade:s,blocking:n,terminated:a}={}){const o=indexedDB.open(t,e),c=R(o);return s&&o.addEventListener("upgradeneeded",u=>{s(R(o.result),u.oldVersion,u.newVersion,R(o.transaction),u)}),r&&o.addEventListener("blocked",u=>r(u.oldVersion,u.newVersion,u)),c.then(u=>{a&&u.addEventListener("close",()=>a()),n&&u.addEventListener("versionchange",f=>n(f.oldVersion,f.newVersion,f))}).catch(()=>{}),c}const Ge=["get","getKey","getAll","getAllKeys","count"],Je=["put","add","delete","clear"],L=new Map;function V(t,e){if(!(t instanceof IDBDatabase&&!(e in t)&&typeof e=="string"))return;if(L.get(e))return L.get(e);const r=e.replace(/FromIndex$/,""),s=e!==r,n=Je.includes(r);if(!(r in(s?IDBIndex:IDBObjectStore).prototype)||!(n||Ge.includes(r)))return;const a=async function(o,...c){const u=this.transaction(o,n?"readwrite":"readonly");let f=u.store;return s&&(f=f.index(c.shift())),(await Promise.all([f[r](...c),n&&u.done]))[0]};return L.set(e,a),a}We(t=>({...t,get:(e,r,s)=>V(e,r)||t.get(e,r,s),has:(e,r)=>!!V(e,r)||t.has(e,r)}));try{self["workbox:background-sync:7.2.0"]&&_()}catch{}const G=3,Ye="workbox-background-sync",y="requests",N="queueName";class ze{constructor(){this._db=null}async addEntry(e){const s=(await this.getDb()).transaction(y,"readwrite",{durability:"relaxed"});await s.store.add(e),await s.done}async getFirstEntryId(){const r=await(await this.getDb()).transaction(y).store.openCursor();return r==null?void 0:r.value.id}async getAllEntriesByQueueName(e){const s=await(await this.getDb()).getAllFromIndex(y,N,IDBKeyRange.only(e));return s||new Array}async getEntryCountByQueueName(e){return(await this.getDb()).countFromIndex(y,N,IDBKeyRange.only(e))}async deleteEntry(e){await(await this.getDb()).delete(y,e)}async getFirstEntryByQueueName(e){return await this.getEndEntryFromIndex(IDBKeyRange.only(e),"next")}async getLastEntryByQueueName(e){return await this.getEndEntryFromIndex(IDBKeyRange.only(e),"prev")}async getEndEntryFromIndex(e,r){const n=await(await this.getDb()).transaction(y).store.index(N).openCursor(e,r);return n==null?void 0:n.value}async getDb(){return this._db||(this._db=await Ve(Ye,G,{upgrade:this._upgradeDb})),this._db}_upgradeDb(e,r){r>0&&r<G&&e.objectStoreNames.contains(y)&&e.deleteObjectStore(y),e.createObjectStore(y,{autoIncrement:!0,keyPath:"id"}).createIndex(N,N,{unique:!1})}}class Xe{constructor(e){this._queueName=e,this._queueDb=new ze}async pushEntry(e){d.isType(e,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"pushEntry",paramName:"entry"}),d.isType(e.requestData,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"pushEntry",paramName:"entry.requestData"}),delete e.id,e.queueName=this._queueName,await this._queueDb.addEntry(e)}async unshiftEntry(e){d.isType(e,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"unshiftEntry",paramName:"entry"}),d.isType(e.requestData,"object",{moduleName:"workbox-background-sync",className:"QueueStore",funcName:"unshiftEntry",paramName:"entry.requestData"});const r=await this._queueDb.getFirstEntryId();r?e.id=r-1:delete e.id,e.queueName=this._queueName,await this._queueDb.addEntry(e)}async popEntry(){return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName))}async shiftEntry(){return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName))}async getAll(){return await this._queueDb.getAllEntriesByQueueName(this._queueName)}async size(){return await this._queueDb.getEntryCountByQueueName(this._queueName)}async deleteEntry(e){await this._queueDb.deleteEntry(e)}async _removeEntry(e){return e&&await this.deleteEntry(e.id),e}}const Ze=["method","referrer","referrerPolicy","mode","credentials","cache","redirect","integrity","keepalive"];class ${static async fromRequest(e){const r={url:e.url,headers:{}};e.method!=="GET"&&(r.body=await e.clone().arrayBuffer());for(const[s,n]of e.headers.entries())r.headers[s]=n;for(const s of Ze)e[s]!==void 0&&(r[s]=e[s]);return new $(r)}constructor(e){d.isType(e,"object",{moduleName:"workbox-background-sync",className:"StorableRequest",funcName:"constructor",paramName:"requestData"}),d.isType(e.url,"string",{moduleName:"workbox-background-sync",className:"StorableRequest",funcName:"constructor",paramName:"requestData.url"}),e.mode==="navigate"&&(e.mode="same-origin"),this._requestData=e}toObject(){const e=Object.assign({},this._requestData);return e.headers=Object.assign({},this._requestData.headers),e.body&&(e.body=e.body.slice(0)),e}toRequest(){return new Request(this._requestData.url,this._requestData)}clone(){return new $(this.toObject())}}const J="workbox-background-sync",et=60*24*7,P=new Set,Y=t=>{const e={request:new $(t.requestData).toRequest(),timestamp:t.timestamp};return t.metadata&&(e.metadata=t.metadata),e};class tt{constructor(e,{forceSyncFallback:r,onSync:s,maxRetentionTime:n}={}){if(this._syncInProgress=!1,this._requestsAddedDuringSync=!1,P.has(e))throw new l("duplicate-queue-name",{name:e});P.add(e),this._name=e,this._onSync=s||this.replayRequests,this._maxRetentionTime=n||et,this._forceSyncFallback=!!r,this._queueStore=new Xe(this._name),this._addSyncListener()}get name(){return this._name}async pushRequest(e){d.isType(e,"object",{moduleName:"workbox-background-sync",className:"Queue",funcName:"pushRequest",paramName:"entry"}),d.isInstance(e.request,Request,{moduleName:"workbox-background-sync",className:"Queue",funcName:"pushRequest",paramName:"entry.request"}),await this._addRequest(e,"push")}async unshiftRequest(e){d.isType(e,"object",{moduleName:"workbox-background-sync",className:"Queue",funcName:"unshiftRequest",paramName:"entry"}),d.isInstance(e.request,Request,{moduleName:"workbox-background-sync",className:"Queue",funcName:"unshiftRequest",paramName:"entry.request"}),await this._addRequest(e,"unshift")}async popRequest(){return this._removeRequest("pop")}async shiftRequest(){return this._removeRequest("shift")}async getAll(){const e=await this._queueStore.getAll(),r=Date.now(),s=[];for(const n of e){const a=this._maxRetentionTime*60*1e3;r-n.timestamp>a?await this._queueStore.deleteEntry(n.id):s.push(Y(n))}return s}async size(){return await this._queueStore.size()}async _addRequest({request:e,metadata:r,timestamp:s=Date.now()},n){const o={requestData:(await $.fromRequest(e.clone())).toObject(),timestamp:s};switch(r&&(o.metadata=r),n){case"push":await this._queueStore.pushEntry(o);break;case"unshift":await this._queueStore.unshiftEntry(o);break}i.log(`Request for '${h(e.url)}' has been added to background sync queue '${this._name}'.`),this._syncInProgress?this._requestsAddedDuringSync=!0:await this.registerSync()}async _removeRequest(e){const r=Date.now();let s;switch(e){case"pop":s=await this._queueStore.popEntry();break;case"shift":s=await this._queueStore.shiftEntry();break}if(s){const n=this._maxRetentionTime*60*1e3;return r-s.timestamp>n?this._removeRequest(e):Y(s)}else return}async replayRequests(){let e;for(;e=await this.shiftRequest();)try{await fetch(e.request.clone()),i.log(`Request for '${h(e.request.url)}' has been replayed in queue '${this._name}'`)}catch{throw await this.unshiftRequest(e),i.log(`Request for '${h(e.request.url)}' failed to replay, putting it back in queue '${this._name}'`),new l("queue-replay-failed",{name:this._name})}i.log(`All requests in queue '${this.name}' have successfully replayed; the queue is now empty!`)}async registerSync(){if("sync"in self.registration&&!this._forceSyncFallback)try{await self.registration.sync.register(`${J}:${this._name}`)}catch(e){i.warn(`Unable to register sync event for '${this._name}'.`,e)}}_addSyncListener(){"sync"in self.registration&&!this._forceSyncFallback?self.addEventListener("sync",e=>{if(e.tag===`${J}:${this._name}`){i.log(`Background sync for tag '${e.tag}' has been received`);const r=async()=>{this._syncInProgress=!0;let s;try{await this._onSync({queue:this})}catch(n){if(n instanceof Error)throw s=n,s}finally{this._requestsAddedDuringSync&&!(s&&!e.lastChance)&&await this.registerSync(),this._syncInProgress=!1,this._requestsAddedDuringSync=!1}};e.waitUntil(r())}}):(i.log("Background sync replaying without background sync event"),this._onSync({queue:this}))}static get _queueNames(){return P}}class rt{constructor(e,r){this.fetchDidFail=async({request:s})=>{await this._queue.pushRequest({request:s})},this._queue=new tt(e,r)}}Ae([{"revision":null,"url":"assets/AiChat-B4pbk8yJ.js"},{"revision":null,"url":"assets/AiChatPage-zTFP0PDA.js"},{"revision":null,"url":"assets/auth.constant-BTqmpk7l.js"},{"revision":null,"url":"assets/AuthPage-BDtwd42y.js"},{"revision":null,"url":"assets/check-BsLcypmv.js"},{"revision":null,"url":"assets/HomePage-DktNv6kA.js"},{"revision":null,"url":"assets/index-C63GjgNF.css"},{"revision":null,"url":"assets/index-jeDeoPqz.js"},{"revision":null,"url":"assets/List-jL-ldTfp.js"},{"revision":null,"url":"assets/loader-circle-BOL7eIWd.js"},{"revision":null,"url":"assets/mail-DicQRjZR.js"},{"revision":null,"url":"assets/ProfilePage-B58smBbB.js"},{"revision":null,"url":"assets/RequestsPage-CJ_n0ZKx.js"},{"revision":null,"url":"assets/schema.constant-BJz4GsVQ.js"},{"revision":null,"url":"assets/send--1vKtCd8.js"},{"revision":null,"url":"assets/SettingsPage-VzFGx870.js"},{"revision":null,"url":"assets/style.constant-BOmyPDgc.js"},{"revision":null,"url":"assets/util-BvkBA0vw.js"},{"revision":null,"url":"assets/workbox-window.prod.es5-B9K5rw8f.js"},{"revision":"e34162af9160134671f2edf7655ae291","url":"index.html"},{"revision":"1b0cea3ff7730fcd3dc8b3ff39a11f67","url":"avatar.png"},{"revision":"f2293edb5fd8b8e18933b9297b7cb3ff","url":"image.png"},{"revision":"dfdb25fcd5c672f427633a8f1e29e5d5","url":"manifest.webmanifest"}]||[]);const st=new rt("api-queue",{maxRetentionTime:24*60});te(({url:t,request:e})=>t.pathname.startsWith("/api")&&["POST","PUT","DELETE"].includes(e.method),new Oe({plugins:[st]}));self.addEventListener("install",()=>self.skipWaiting());self.addEventListener("activate",()=>self.clients.claim());

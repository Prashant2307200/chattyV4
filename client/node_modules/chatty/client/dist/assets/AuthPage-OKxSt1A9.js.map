{"version":3,"mappings":"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","names":["__iconNode","EyeOff","createLucideIcon","Eye","Lock","useToggle","initialValue","value","setValue","useState","toggle","useCallback","prev","isCheckBoxInput","element","isDateObject","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","data","copy","isArray","isFileListInstance","key","compact","isUndefined","val","get","object","path","defaultValue","result","isBoolean","isKey","stringToPath","input","set","index","tempPath","length","lastIndex","newValue","objValue","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","React__default","getProxyFormState","formState","control","localProxyFormState","isRoot","_key","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","appendErrors","validateAllFieldCriteria","errors","type","message","convertToArrayPayload","createSubject","_observers","observer","o","isEmptyObject","isFileInput","isFunction","isHTMLElement","owner","isMultipleSelect","isRadioInput","isRadioOrCheckbox","ref","live","baseGet","updatePath","isEmptyArray","obj","unset","paths","childObject","objectHasFunction","markFieldsDirty","fields","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","defaultResult","validResult","getCheckboxValue","options","values","option","getFieldValueAs","valueAsNumber","valueAsDate","setValueAs","defaultReturn","getRadioValue","previous","getFieldValue","_f","getResolverOptions","fieldsNames","_fields","criteriaMode","shouldUseNativeValidation","field","isRegex","getRuleValue","rule","getValidationModes","mode","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","isWatched","isBlurEvent","watchName","iterateFieldsByAction","action","abortEarly","currentField","schemaErrorLookup","error","foundError","shouldRenderFormState","formStateData","_proxyFormState","updateFormState","shouldSubscribeByName","signalName","exact","currentName","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","updateFieldArrayRootError","fieldArrayErrors","isMessage","getValidateError","getValueAndMessage","validationData","validateField","disabledFieldNames","isFieldArray","refs","required","maxLength","minLength","min","max","pattern","validate","mount","inputValue","inputRef","setCustomValidity","isRadio","isCheckBox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","defaultOptions","createFormControl","props","_options","_formState","_defaultValues","_formValues","_state","delayErrorCallback","timer","_proxySubscribeFormState","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","callback","wait","_setValid","shouldUpdateValid","isValid","_runSchema","executeBuiltInValidation","_updateIsValidating","isValidating","_setFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","touchedFields","_getDirty","updateErrors","_setErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","updatedFormState","executeSchemaAndUpdateState","shouldOnlyCheckValid","context","isFieldArrayRoot","isPromiseFunction","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","cloneValue","onChange","target","isFieldValueUpdated","_updateIsFieldValueUpdated","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","getFieldState","clearErrors","inputName","setError","currentError","currentRef","restOfErrorTree","watch","payload","_subscribe","_setFormState","subscribe","_setDisabledField","disabled","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","_disableForm","handleSubmit","onValid","onInvalid","e","onValidError","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","fieldsToCheck","form","reset","setFocus","methods","useIsomorphicLayoutEffect","useForm","_formControl","_values","sub","isDirty","state","r","t","s","n","f","c","i","a","u","AuthFormFields","isRegister","subscribeToEvents","useSocketStore","AuthMutation","useApiMutation","authSchema","setAuthSchema","showPassword","toggleShowPassword","useEffect","__vitePreload","module","onSubmit","isSubmitting","zodResolver","MemoizedMail","useMemo","jsxDEV","Mail","this","MemoizedLock","MemoizedUser","User","MemoizedLoader","Loader2","MemoizedPasswordIcon","Fragment","memo","MotionLines","motion","AuthPage","toggleIsRegister","isPending","startTransition","useTransition","authForm","setAuthForm","handleOnClick","PageLoader","authImagePattern","styles","Logo","List"],"ignoreList":[0,1,2,4,5,6],"sources":["../../node_modules/lucide-react/dist/esm/icons/eye-off.js","../../node_modules/lucide-react/dist/esm/icons/eye.js","../../node_modules/lucide-react/dist/esm/icons/lock.js","../../src/hooks/useToggle.js","../../node_modules/react-hook-form/dist/index.esm.mjs","../../node_modules/@hookform/resolvers/dist/resolvers.mjs","../../node_modules/@hookform/resolvers/zod/dist/zod.mjs","../../src/components/Auth/AuthFormFields.jsx","../../src/components/ui/MotionLines.jsx","../../src/pages/AuthPage.jsx"],"sourcesContent":["/**\n * @license lucide-react v0.488.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\n    \"path\",\n    {\n      d: \"M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49\",\n      key: \"ct8e1f\"\n    }\n  ],\n  [\"path\", { d: \"M14.084 14.158a3 3 0 0 1-4.242-4.242\", key: \"151rxh\" }],\n  [\n    \"path\",\n    {\n      d: \"M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143\",\n      key: \"13bj9a\"\n    }\n  ],\n  [\"path\", { d: \"m2 2 20 20\", key: \"1ooewy\" }]\n];\nconst EyeOff = createLucideIcon(\"eye-off\", __iconNode);\n\nexport { __iconNode, EyeOff as default };\n//# sourceMappingURL=eye-off.js.map\n","/**\n * @license lucide-react v0.488.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\n    \"path\",\n    {\n      d: \"M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0\",\n      key: \"1nclc0\"\n    }\n  ],\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"3\", key: \"1v7zrd\" }]\n];\nconst Eye = createLucideIcon(\"eye\", __iconNode);\n\nexport { __iconNode, Eye as default };\n//# sourceMappingURL=eye.js.map\n","/**\n * @license lucide-react v0.488.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"rect\", { width: \"18\", height: \"11\", x: \"3\", y: \"11\", rx: \"2\", ry: \"2\", key: \"1w4ew1\" }],\n  [\"path\", { d: \"M7 11V7a5 5 0 0 1 10 0v4\", key: \"fwvmzm\" }]\n];\nconst Lock = createLucideIcon(\"lock\", __iconNode);\n\nexport { __iconNode, Lock as default };\n//# sourceMappingURL=lock.js.map\n","import { useCallback, useState } from \"react\";\n\nexport default function useToggle (initialValue = false) {\n\n  const [value, setValue] = useState(initialValue);\n\n  const toggle = useCallback(() => { \n    setValue(prev => !prev);\n  }, [])\n\n  return [value, toggle];\n}\n","import * as React from 'react';\nimport React__default from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React__default.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React__default.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React__default.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nconst useDeepEqualEffect = (effect, deps) => {\n    const ref = React.useRef(deps);\n    if (!deepEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    React.useEffect(effect, ref.current);\n};\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React__default.useState(control._formState);\n    const _localProxyFormState = React__default.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    useDeepEqualEffect(() => control._subscribe({\n        name: name,\n        formState: _localProxyFormState.current,\n        exact,\n        callback: (formState) => {\n            !disabled &&\n                updateFormState({\n                    ...control._formState,\n                    ...formState,\n                });\n        },\n    }), [name, disabled, exact]);\n    React__default.useEffect(() => {\n        _localProxyFormState.current.isValid && control._setValid(true);\n    }, [control]);\n    return React__default.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const [value, updateValue] = React__default.useState(control._getWatch(name, defaultValue));\n    useDeepEqualEffect(() => control._subscribe({\n        name: name,\n        formState: {\n            values: true,\n        },\n        exact,\n        callback: (formState) => !disabled &&\n            updateValue(generateWatchOutput(name, control._names, formState.values || control._formValues, false, defaultValue)),\n    }), [name, defaultValue, disabled, exact]);\n    React__default.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _props = React__default.useRef(props);\n    const _registerProps = React__default.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React__default.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const onChange = React__default.useCallback((event) => _registerProps.current.onChange({\n        target: {\n            value: getEventValue(event),\n            name: name,\n        },\n        type: EVENTS.CHANGE,\n    }), [name]);\n    const onBlur = React__default.useCallback(() => _registerProps.current.onBlur({\n        target: {\n            value: get(control._formValues, name),\n            name: name,\n        },\n        type: EVENTS.BLUR,\n    }), [name, control._formValues]);\n    const ref = React__default.useCallback((elm) => {\n        const field = get(control._fields, name);\n        if (field && elm) {\n            field._f.ref = {\n                focus: () => elm.focus(),\n                select: () => elm.select(),\n                setCustomValidity: (message) => elm.setCustomValidity(message),\n                reportValidity: () => elm.reportValidity(),\n            };\n        }\n    }, [control._fields, name]);\n    const field = React__default.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange,\n        onBlur,\n        ref,\n    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);\n    React__default.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        control.register(name, {\n            ..._props.current.rules,\n            ...(isBoolean(_props.current.disabled)\n                ? { disabled: _props.current.disabled }\n                : {}),\n        });\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React__default.useEffect(() => {\n        control._setDisabledField({\n            disabled,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React__default.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React__default.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React__default.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React__default.createElement(React__default.Fragment, null, render({\n        submit,\n    }))) : (React__default.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isMessage = (value) => isString(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isReady: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    const _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.values || _options.defaultValues) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    let _proxySubscribeFormState = {\n        ..._proxyFormState,\n    };\n    const _subjects = {\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _setValid = async (shouldUpdateValid) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValid ||\n                _proxySubscribeFormState.isValid ||\n                shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _runSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating ||\n                _proxyFormState.validatingFields ||\n                _proxySubscribeFormState.isValidating ||\n                _proxySubscribeFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if ((_proxyFormState.touchedFields ||\n                _proxySubscribeFormState.touchedFields) &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _setValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!get(_formState.dirtyFields, name);\n                isCurrentFieldPristine\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        ((_proxyFormState.dirtyFields ||\n                            _proxySubscribeFormState.dirtyFields) &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            ((_proxyFormState.touchedFields ||\n                                _proxySubscribeFormState.touchedFields) &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _runSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _runSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.state.next({\n                            name,\n                            values: cloneObject(_formValues),\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: cloneObject(_formValues),\n            });\n            if ((_proxyFormState.isDirty ||\n                _proxyFormState.dirtyFields ||\n                _proxySubscribeFormState.isDirty ||\n                _proxySubscribeFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.state.next({\n            name: _state.mount ? name : undefined,\n            values: cloneObject(_formValues),\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = target.type\n                ? getFieldValue(field._f)\n                : getEventValue(event);\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.state.next({\n                    name,\n                    type: event.type,\n                    values: cloneObject(_formValues),\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\n                    if (_options.mode === 'onBlur') {\n                        if (isBlurEvent) {\n                            _setValid();\n                        }\n                    }\n                    else if (!isBlurEvent) {\n                        _setValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _runSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid ||\n                        _proxySubscribeFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _setValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\n                    isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.state.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const _subscribe = (props) => _subjects.state.subscribe({\n        next: (formState) => {\n            if (shouldSubscribeByName(props.name, formState.name, props.exact) &&\n                shouldRenderFormState(formState, props.formState || _proxyFormState, _setFormState, props.reRenderRoot)) {\n                props.callback({\n                    values: { ..._formValues },\n                    ..._formState,\n                    ...formState,\n                });\n            }\n        },\n    }).unsubscribe;\n    const subscribe = (props) => {\n        _state.mount = true;\n        _proxySubscribeFormState = {\n            ..._proxySubscribeFormState,\n            ...props.formState,\n        };\n        return _subscribe({\n            ...props,\n            formState: _proxySubscribeFormState,\n        });\n    };\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.state.next({\n            values: cloneObject(_formValues),\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _setValid();\n    };\n    const _setDisabledField = ({ disabled, name, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _setDisabledField({\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist &&\n                e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _runSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _setValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                for (const fieldName of _names.mount) {\n                    setValue(fieldName, get(values, fieldName));\n                }\n            }\n            _formValues = cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.state.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _setFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    const methods = {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _subscribe,\n            _runSchema,\n            _getWatch,\n            _getDirty,\n            _setValid,\n            _setFieldArray,\n            _setDisabledField,\n            _setErrors,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _removeUnmounted,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        subscribe,\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n    return {\n        ...methods,\n        formControl: methods,\n    };\n}\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React__default.useState(control._getFieldArray(name));\n    const ids = React__default.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React__default.useRef(fields);\n    const _name = React__default.useRef(name);\n    const _actioned = React__default.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    React__default.useEffect(() => control._subjects.array.subscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n    }).unsubscribe, [control]);\n    const updateValues = React__default.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._setFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._setFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._setFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React__default.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted) &&\n            !getValidationModes(control._options.reValidateMode).isOnSubmit) {\n            if (control._options.resolver) {\n                control._runSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.state.next({\n            name,\n            values: cloneObject(control._formValues),\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._setValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React__default.useEffect(() => {\n        !get(control._formValues, name) && control._setFieldArray(name);\n        return () => {\n            const updateMounted = (name, value) => {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    field._f.mount = value;\n                }\n            };\n            control._options.shouldUnregister || shouldUnregister\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React__default.useCallback(swap, [updateValues, name, control]),\n        move: React__default.useCallback(move, [updateValues, name, control]),\n        prepend: React__default.useCallback(prepend, [updateValues, name, control]),\n        append: React__default.useCallback(append, [updateValues, name, control]),\n        remove: React__default.useCallback(remove, [updateValues, name, control]),\n        insert: React__default.useCallback(insert$1, [updateValues, name, control]),\n        update: React__default.useCallback(update, [updateValues, name, control]),\n        replace: React__default.useCallback(replace, [updateValues, name, control]),\n        fields: React__default.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React__default.useLayoutEffect : React__default.useEffect;\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React__default.useRef(undefined);\n    const _values = React__default.useRef(undefined);\n    const [formState, updateFormState] = React__default.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        isReady: false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...(props.formControl ? props.formControl : createFormControl(props)),\n            formState,\n        };\n        if (props.formControl &&\n            props.defaultValues &&\n            !isFunction(props.defaultValues)) {\n            props.formControl.reset(props.defaultValues, props.resetOptions);\n        }\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useIsomorphicLayoutEffect(() => {\n        const sub = control._subscribe({\n            formState: control._proxyFormState,\n            callback: () => updateFormState({ ...control._formState }),\n            reRenderRoot: true,\n        });\n        updateFormState((data) => ({\n            ...data,\n            isReady: true,\n        }));\n        control._formState.isReady = true;\n        return sub;\n    }, [control]);\n    React__default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React__default.useEffect(() => {\n        if (props.mode) {\n            control._options.mode = props.mode;\n        }\n        if (props.reValidateMode) {\n            control._options.reValidateMode = props.reValidateMode;\n        }\n        if (props.errors && !isEmptyObject(props.errors)) {\n            control._setErrors(props.errors);\n        }\n    }, [control, props.errors, props.mode, props.reValidateMode]);\n    React__default.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.state.next({\n                values: control._getWatch(),\n            });\n    }, [control, props.shouldUnregister]);\n    React__default.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React__default.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [control, props.values]);\n    React__default.useEffect(() => {\n        if (!control._state.mount) {\n            control._setValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, createFormControl, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import{get as e,set as t}from\"react-hook-form\";const r=(t,r,o)=>{if(t&&\"reportValidity\"in t){const s=e(o,r);t.setCustomValidity(s&&s.message||\"\"),t.reportValidity()}},o=(e,t)=>{for(const o in t.fields){const s=t.fields[o];s&&s.ref&&\"reportValidity\"in s.ref?r(s.ref,o,e):s&&s.refs&&s.refs.forEach(t=>r(t,o,e))}},s=(r,s)=>{s.shouldUseNativeValidation&&o(r,s);const n={};for(const o in r){const f=e(s.fields,o),c=Object.assign(r[o]||{},{ref:f&&f.ref});if(i(s.names||Object.keys(r),o)){const r=Object.assign({},e(n,o));t(r,\"root\",c),t(n,o,r)}else t(n,o,c)}return n},i=(e,t)=>{const r=n(t);return e.some(e=>n(e).match(`^${r}\\\\.\\\\d+`))};function n(e){return e.replace(/\\]|\\[/g,\"\")}export{s as toNestErrors,o as validateFieldsNatively};\n//# sourceMappingURL=resolvers.mjs.map\n","import{validateFieldsNatively as r,toNestErrors as e}from\"@hookform/resolvers\";import{appendErrors as o}from\"react-hook-form\";function n(r,e){for(var n={};r.length;){var s=r[0],t=s.code,i=s.message,a=s.path.join(\".\");if(!n[a])if(\"unionErrors\"in s){var u=s.unionErrors[0].errors[0];n[a]={message:u.message,type:u.code}}else n[a]={message:i,type:t};if(\"unionErrors\"in s&&s.unionErrors.forEach(function(e){return e.errors.forEach(function(e){return r.push(e)})}),e){var c=n[a].types,f=c&&c[s.code];n[a]=o(a,e,n,t,f?[].concat(f,s.message):s.message)}r.shift()}return n}function s(o,s,t){return void 0===t&&(t={}),function(i,a,u){try{return Promise.resolve(function(e,n){try{var a=Promise.resolve(o[\"sync\"===t.mode?\"parse\":\"parseAsync\"](i,s)).then(function(e){return u.shouldUseNativeValidation&&r({},u),{errors:{},values:t.raw?Object.assign({},i):e}})}catch(r){return n(r)}return a&&a.then?a.then(void 0,n):a}(0,function(r){if(function(r){return Array.isArray(null==r?void 0:r.errors)}(r))return{values:{},errors:e(n(r.errors,!u.shouldUseNativeValidation&&\"all\"===u.criteriaMode),u)};throw r}))}catch(r){return Promise.reject(r)}}}export{s as zodResolver};\n//# sourceMappingURL=zod.module.js.map\n","import { useForm } from 'react-hook-form'\r\nimport { Mail, Lock, User } from 'lucide-react'; \r\nimport { Eye, EyeOff, Loader2 } from \"lucide-react\";\r\nimport { zodResolver } from '@hookform/resolvers/zod'\r\nimport { memo, useEffect, useCallback, useState, useMemo } from \"react\";\r\n\r\nimport useToggle from '../../hooks/useToggle'; \r\nimport { useApiMutation } from '../../hooks/useApiMutation';\r\nimport { useSocketStore } from '../../store/useSocketStore';\r\n\r\nconst AuthFormFields = ({ isRegister }) => {\r\n\r\n  const { subscribeToEvents } = useSocketStore();\r\n\r\n  const { mutate: AuthMutation } = useApiMutation({\r\n    keys: [\"authUser\"],\r\n    path: isRegister ? \"/auth/register\" : \"/auth/login\",\r\n    message: isRegister ? \"User successfully registered!\" : \"User login successfull!\",\r\n    cb: data => {\r\n      subscribeToEvents(data._id);\r\n    }\r\n  });\r\n\r\n  const [authSchema, setAuthSchema] = useState(null);\r\n  const [showPassword, toggleShowPassword] = useToggle(false);\r\n\r\n  useEffect(() => {\r\n    import('../../constants/schema.constant').then(module => {\r\n      setAuthSchema(module[isRegister ? \"registerSchema\" : \"loginSchema\"]);\r\n    })\r\n  }, [isRegister]);\r\n\r\n  const onSubmit = useCallback(data => {\r\n    AuthMutation(data);\r\n  }, [isRegister]);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm({\r\n    resolver: zodResolver(authSchema),\r\n    mode: 'onChange',\r\n  });\r\n\r\n  const MemoizedMail = useMemo(() => <Mail className=\"z-10 size-5 text-base-content/40\" />, []);\r\n  const MemoizedLock = useMemo(() => <Lock className=\"z-10 size-5 text-base-content/40\" />, []);\r\n  const MemoizedUser = useMemo(() => <User className=\"z-10 size-5 text-base-content/40\" />, []);\r\n  const MemoizedLoader = useMemo(() => <Loader2 className=\"h-5 w-5 animate-spin\" />, []);\r\n  const MemoizedPasswordIcon = useMemo(\r\n    () => showPassword ? <EyeOff className=\"h-5 w-5 text-base-content/40 z-10\" /> : <Eye className=\"h-5 w-5 text-base-content/40 z-10\" />,\r\n    [showPassword]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <form className=\"space-y-6\" onSubmit={handleSubmit(onSubmit)}>\r\n\r\n          {isRegister && (\r\n            <div className=\"form-control\">\r\n              <label className=\"label\">\r\n                <span className=\"label-text font-medium\">Username</span>\r\n              </label>\r\n              <div className=\"relative\">\r\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                  {MemoizedUser}\r\n                </div>\r\n                <input className={`input input-bordered w-full pl-10`} placeholder='johndoe' {...register('username')} autoComplete=\"off\" autoCapitalize=\"words\" disabled={!authSchema} />\r\n              </div>\r\n              {errors.username && <span className=\"text-error\">{errors.username.message}</span>}\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"form-control\">\r\n            <label className=\"label\">\r\n              <span className=\"label-text font-medium\">Email</span>\r\n            </label>\r\n            <div className=\"relative\">\r\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                {MemoizedMail}\r\n              </div>\r\n              <input className={`input input-bordered w-full pl-10`} placeholder='you@example.com' type=\"email\" {...register('email')} autoComplete=\"off\" disabled={!authSchema} />\r\n            </div>\r\n            {errors.email && <span className=\"text-error\">{errors.email.message}</span>}\r\n          </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label className=\"label\">\r\n            <span className=\"label-text font-medium\">Password</span>\r\n          </label>\r\n          <div className=\"relative\">\r\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n              {MemoizedLock}\r\n            </div>\r\n            <input className={`input input-bordered w-full pl-10`} placeholder=\"••••••••\" {...register('password')} type={showPassword ? \"text\" : \"password\"} autoComplete=\"off\" disabled={!authSchema} />\r\n            <button className=\"absolute inset-y-0 right-0 pr-3 flex items-center\" type=\"button\" onClick={toggleShowPassword}>\r\n              {MemoizedPasswordIcon}\r\n            </button>\r\n          </div>\r\n          {errors.password && <span className=\"text-error\">{errors.password.message}</span>}\r\n        </div>\r\n\r\n        <button className=\"btn btn-primary w-full\" type=\"submit\" disabled={isSubmitting}>\r\n          {isSubmitting ? (\r\n            <>\r\n              {MemoizedLoader}\r\n              Loading...\r\n            </>\r\n          ) : isRegister ? \"Sign up\" : \"Sign in\"}\r\n        </button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(AuthFormFields);","import { motion } from \"framer-motion\"; \r\n\r\nconst MotionLines = () => {\r\n  \r\n  const path = \"M0 0 H48 V24 H96 V48 H160\";\r\n  const height = 140;\r\n  const width = 420;\r\n\r\n  return (\r\n    <svg\r\n      width={width}\r\n      height={height}\r\n      viewBox={`0 0 ${width} ${height}`}\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className=\"absolute inset-20 z-50\"\r\n    >\r\n      <motion.path\r\n        d={path}\r\n        stroke=\"url(#paint0_linear)\" \r\n      />\r\n      <defs>\r\n        <motion.linearGradient\r\n          id=\"paint0_linear\"\r\n          initial={{\r\n            x1: 200,\r\n            x2: 400.5,\r\n            y1: 0,\r\n            y2: 0\r\n          }}\r\n          animate={{\r\n            x1: -100,\r\n            x2: -100,\r\n            y1: 0,\r\n            y2: 0\r\n          }}\r\n          transition={{\r\n            duration: 3,\r\n            ease: \"linear\",\r\n            repeat: Infinity\r\n          }}\r\n          gradientUnits=\"userSpaceOnUse\"\r\n        >\r\n          <stop stopColor=\"#2EB9DF\" stopOpacity=\"0\" />\r\n          <stop stopColor=\"#2EB9DF\" />\r\n          <stop stopColor=\"#9E00FF\" stopOpacity=\"0\" offset=\"1\" />\r\n        </motion.linearGradient>\r\n      </defs>\r\n    </svg>\r\n  );\r\n}; \r\n\r\nexport default MotionLines;\r\n","import { useEffect, useState, useTransition, useCallback } from 'react';\r\n\r\nimport Logo from '../components/ui/AppLogo';\r\nimport useToggle from '../hooks/useToggle';\r\nimport AuthFormFields from '../components/Auth/AuthFormFields';\r\n\r\nimport { List } from '../components/ui/List';\r\nimport PageLoader from '../components/ui/PageLoader';\r\nimport { styles } from '../constants/style.constant';\r\nimport MotionLines from '../components/ui/MotionLines';\r\n\r\n\r\nconst AuthPage = () => {\r\n\r\n  const [isRegister, toggleIsRegister] = useToggle();\r\n  const [isPending, startTransition] = useTransition();\r\n\r\n  const [authForm, setAuthForm] = useState(null)\r\n\r\n  const handleOnClick = useCallback(() => {\r\n    startTransition(() => {\r\n      toggleIsRegister()\r\n    })\r\n  }, [startTransition, toggleIsRegister])\r\n\r\n  useEffect(() => {\r\n    import(\"../constants/auth.constant\").then(module => {\r\n      setAuthForm(module[isRegister ? \"register\" : \"login\"]);\r\n    });\r\n  }, [isRegister]);\r\n\r\n  if (!authForm) return <PageLoader />\r\n\r\n  const { form, authImagePattern } = authForm;\r\n\r\n  return (\r\n    <main className=\"h-[100svh] grid lg:grid-cols-2 overflow-hidden\"> \r\n\r\n      {/* auth form  */}\r\n      <section className=\"relative flex flex-col justify-center items-center p-6 sm:p-12\">\r\n\r\n        <MotionLines />\r\n\r\n        {/* container */}\r\n        <div className=\"w-full max-w-md space-y-8\">\r\n\r\n          {/* header */}\r\n          <div className=\"text-center mb-8\">\r\n            <div className=\"flex flex-col items-center gap-2 group\">\r\n              <div className={`w-12 h-12 rounded-xl ${styles.primary} flex items-center justify-center group-hover:${styles.primaryHover} transition-colors`}>\r\n                <Logo className=\"w-6 h-6 text-primary\" />\r\n              </div>\r\n              <h1 className={`${styles.title} mt-2`}>{form?.title}</h1>\r\n              <p className={styles.subtitle}>{form?.subtitle}</p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* form */}\r\n          <AuthFormFields isRegister={isRegister} />\r\n\r\n          {/* footer */}\r\n          <div className=\"text-center\">\r\n            <p className={styles.subtitle}>\r\n              {form?.suggestion}{\" \"}\r\n              <span className=\"link link-primary\"\r\n                disabled={isPending}\r\n                onClick={handleOnClick}>\r\n                {isPending ? \"Loading...\" : form?.suggestionHighlight}\r\n              </span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* auth image pattern  */}\r\n      <section className={`hidden lg:flex items-center justify-center p-12 ${styles.base}`}>\r\n        <div className=\"max-w-md text-center\">\r\n          <div className=\"grid grid-cols-3 gap-3 mb-8\">\r\n            <List\r\n              data={[...Array(9)]}\r\n              getItem={(_, index) => (\r\n                <div className={`aspect-square rounded-2xl ${styles.primary} ${index % 2 === 0 ? \"animate-pulse\" : \"\"}`} />\r\n              )}\r\n            />\r\n          </div>\r\n          <h2 className={`mb-4 ${styles.title}`}>{authImagePattern?.title}</h2>\r\n          <p className={styles.subtitle}>{authImagePattern?.subtitle}</p>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  )\r\n}\r\n\r\n\r\nexport default AuthPage;"],"file":"assets/AuthPage-OKxSt1A9.js"}